// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String  @map("user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String? @db.Text
    refresh_token_expires_in Int? // github refresh_token_expires_in
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("t_bl_account")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    updateAt     DateTime @default(now()) @map("update_at")

    @@map("t_bl_session")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    image         String
    emailVerified DateTime? @map("email_verified")
    accounts      Account[]
    sessions      Session[]

    @@map("t_bl_user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("t_bl_verification_token")
}

model Post {
    id           String       @id @default(cuid())
    title        String
    introduce    String?      @default("")
    is_release   Boolean      @default(false)
    content      String       @db.Text
    release_date DateTime?
    PostOnTag    PostOnTags[]
    Category     Category?    @relation(fields: [category_id], references: [id])
    category_id  String?
    cover        Image?       @relation(fields: [imageId], references: [id])
    imageId      String?      @map("image_id")
    created_at   DateTime     @unique @default(now())

    @@map("t_bl_post")
}

model Image {
    id   String @id @default(cuid())
    name String
    url  String
    Post Post[]

    @@map("t_bl_image")
}

model Config {
    id             String   @id @default(cuid())
    blog_title     String   @unique
    blog_introduce String   @db.Text
    slogan         String?
    socials        Social[]

    @@map("t_bl_config")
}

model Social {
    id       String  @id @default(cuid())
    name     String? @unique
    url      String?
    Config   Config? @relation(fields: [configId], references: [id])
    configId String? @map("config_id")

    @@map("t_bl_social")
}

model Tag {
    id        String       @id @default(cuid())
    name      String
    icon      String?
    PostOnTag PostOnTags[]

    @@map("t_bl_tag")
}

model PostOnTags {
    post_id String
    tag_id  String
    post    Post   @relation(fields: [post_id], references: [id])
    tag     Tag    @relation(fields: [tag_id], references: [id])

    @@unique([post_id, tag_id])
    @@map("t_bl_post_on_tag")
}

model Category {
    id   String  @id @default(cuid())
    name String
    icon String?
    Post Post[]

    @@map("t_bl_category")
}
